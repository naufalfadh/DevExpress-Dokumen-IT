@using Template_DevExpress_By_MFM.Models
@using DevExtreme.AspNet.Mvc
@{
    ViewBag.Title = "Dokumen Request IT";
}
@{
    var logSession = HttpContext.Current.Session["SHealth"] as SessionLogin;
}



<style>
    .widget-container {
        margin-right: 320px;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }
    
    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    .options {
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 260px;
    }

    .caption {
        font-size: 18px;
        font-weight: 500;
    }

    .option {
        margin-top: 10px;
    }

    .dx-datagrid-rowsview .column_class {
        text-align: left !important;
    }

    #gridContainer .dx-datagrid-headers {
        background-color: #383c40 !important;
        color: white !important;
        font-weight: bold !important;
    }

        /* Header kolom command edit (Print dan Action) */
        #gridContainer .dx-datagrid-headers .dx-command-edit {
            background-color: #383c40 !important;
            color: white !important;
            font-weight: bold !important;
        }

            /* Teks dan ikon tombol header jika ada */
            #gridContainer .dx-datagrid-headers .dx-command-edit .dx-button,
            #gridContainer .dx-datagrid-headers .dx-command-edit .dx-icon {
                color: white !important;
            }
    .dx-link.dx-link-save {
        background-color: #28a745; /* Hijau */
        color: white !important;
        padding: 4px 10px;
        border-radius: 4px;
        font-weight: bold;
    }
    .dx-link.dx-link-edit {
        background-color: #28a745; /* Hijau */
        color: white !important;
        padding: 4px 10px;
        border-radius: 4px;
        font-weight: bold;
    }

    .dx-link.dx-link-delete {
        background-color: #dc3545; /* Merah */
        color: white !important;
        padding: 4px 10px;
        border-radius: 4px;
        font-weight: bold;
        margin-left: 5px;
    }

    /* Style untuk tombol Cancel */
    .dx-link.dx-link-cancel {
        background-color: #dc3545; /* Merah */
        color: white !important;
        padding: 4px 10px;
        border-radius: 4px;
        font-weight: bold;
        margin-left: 5px;
    }

    /* Hover effect */
    .dx-link.dx-link-save:hover {
        background-color: #218838;
    }

    .dx-link.dx-link-cancel:hover {
        background-color: #c82333;
    }
</style>



<div class="content">
    <input type="text" hidden id="pq_id" />
    <div class="container-fluid" style="padding-bottom:-300px;">
        <div class="page-title-box">
            <div class="row align-items-center">
                <div class="col-sm-4">
                    <h4 class="page-title">Dokumen Request</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="javascript:void(0);">Dokumen Request</a></li>
                        <li class="breadcrumb-item" active><a href="javascript:void(0);">Akses Modul/Session ERP</a></li>
                    </ol>

                </div>
            </div>
        </div>
    </div>

    <input type="text" id="temp_id" hidden />
    <div class="row">
        <div class="col-12" id="table-data-alatvm">
            @(Html.DevExtreme().DataGrid<MasterDokumenRequest>().ID("gridContainer").ShowBorders(true).OnRowPrepared("onRowPrepared").OnContentReady("onGridContentReady")
 .AllowColumnReordering(true)
 .AllowColumnResizing(true)
 .ColumnAutoWidth(true)
 .ColumnFixing(c => c.Enabled(true))
 .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
 .ShowColumnLines(true)
 .WordWrapEnabled(true)
 .RowAlternationEnabled(true)
 .DataSource(d => d.WebApi().Controller("ManageMasterDokumenRequest").InsertAction(false).UpdateAction(false).DeleteAction(false).Key("dok_id"))
 .Columns(columns =>
 {
     columns.Add().Caption("No").FormItem(i => i.Visible(false)).AllowEditing(false).CellTemplate(new JS("cell_numbering")).Alignment(HorizontalAlignment.Center);
     columns.AddFor(m => m.usr_npk).Caption("NPK").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("usr_npk")).ColSpan(2));
     columns.AddFor(m => m.usr_nama).Caption("Name").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("dok_req_by")).ColSpan(1));
     columns.AddFor(m => m.dok_refnum).Caption("Reference Number").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("dok_refnum")).ColSpan(2));
     columns.AddFor(m => m.createDate).Caption("Tanggal Pengajuan").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("createDate")).ColSpan(1));
     columns.AddFor(m => m.dok_document).Caption("Dokumen Request").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("dok_document")).ColSpan(1));
     columns.AddFor(m => m.createBy).Caption("Request By").Alignment(HorizontalAlignment.Center).FormItem(i => i.IsRequired(true).Editor(e => e.NumberBox().ID("createBy")).ColSpan(1));
     columns.AddFor(m => m.dok_status).Caption("Status")
     .Alignment(HorizontalAlignment.Center)
     .Lookup(lookup => lookup
         .DataSource(d => d.StaticJson().Url("~/Content/json_data/UserStatusActive.json").Key("ID"))
         .DisplayExpr("Name")
         .ValueExpr("ID")
     )
     .CellTemplate(new JS(
         @"function (container, options) {
            var colorMap = {
                0: '#FFD700',   // Waiting Approval Kadept
                1: '#FFA500',   // Waiting Approval Kadept IT
                2: '#FF6347',   // Reject
                3: '#90EE90',   // On Progress
                4: '#87CEEB',    // Waiting BAST
                5: '#8A2BE2',   //  Waiting BAST User
                6: '#D3D3D3', //  Waiting BAST Kadept IT
                7: '#87CEEB' // Done
            };
            var color = colorMap[options.value] || 'transparent';
            $('<div>')
                .text(options.text)
                .css({
                    'background-color': color,
                    'padding': '5px',
                    'border-radius': '5px',
                    'text-align': 'center'
                })
                .appendTo(container);
        }"
     ))
    .FormItem(i => i.Visible(true).Editor(e => e.SelectBox().SearchEnabled(false)));


     columns.AddFor(m => m.dok_lampiran)
        .Caption("Print")
        .Alignment(HorizontalAlignment.Center)
        .Type(GridCommandColumnType.Buttons)
        .Width(100)
        .Buttons(b =>
        {
            b.Add()
            .Icon("print")
            .Hint("Print Document")
            .OnClick("functionPrintDocument");
        });

     columns.AddFor(m => m.createBy)
     .Visible(true)
     .Alignment(HorizontalAlignment.Center)
     .Caption("Action")
     .Width(120)
     .Type(GridCommandColumnType.Buttons)
     .Buttons(b =>
     {
         b.Add().CssClass("btn-edit").Icon("edit").Hint("Edit Data")
         .OnClick("function(e) { clickPopupEdit(e.row.data); }");
         b.Add().CssClass("btn-delete").Icon("trash").Hint("Delete Data")
 .OnClick("function(e) { deleteData(e.row.data); }");
         b.Add().CssClass("btn-detail").Icon("info").Hint("Info Detail")
 .OnClick("function(e) { showInfoAdminPopup(" +
     "e.row.data.dok_refnum, e.row.data.usr_npk, e.row.data.usr_nama, e.row.data.dok_user_erp, " +
     "e.row.data.dok_plant, e.row.data.dok_section, e.row.data.dok_erp, e.row.data.dok_req_modul, " +
     "e.row.data.dok_req_by, e.row.data.dok_status, '', '', '', '', " + // Kosongkan field menu untuk grid
     "e.row.data.dok_reason, e.row.data.createBy, e.row.data.modifBy, e.row.data.createDate, " +
     "e.row.data.modifDate, e.row.data.dok_lampiran, e.row.data.dok_document, e.row.data.dok_approve_k, " +
     "e.row.data.DetailDokumenRequests, e.row.data.dok_reason_reject," +
"); }");


         b.Add().CssClass("btn-approve").Icon("check").Hint("Approval Data")
    .OnClick("function(e) { showApprovePopup(e.row.data.dok_id, e.row.data.dok_status); }");

         b.Add().CssClass("btn-reject").Icon("close").Hint("Reject Data")
    .OnClick("function(e) { showRejectPopup(e.row.data.dok_refnum, e.row.data.dok_status, e.row.data.dok_id); }");

         b.Add().CssClass("btn-approveit").Icon("check").Hint("Approval IT Data")
     .OnClick("function(e) { showApproveItPopup(e.row.data.dok_id, e.row.data.dok_status); }");

         b.Add().CssClass("btn-rejectit").Icon("close").Hint("Reject IT Data")
    .OnClick("function(e) { showRejectPopup(e.row.data.dok_refnum, e.row.data.dok_status, e.row.data.dok_id); }");

         b.Add().CssClass("btn-accadmin").Icon("add").Hint("Acc Admin")
.OnClick("function(e) { showAccadminPopup(e.row.data.dok_refnum, e.row.data.dok_status, e.row.data.dok_id); }");

         b.Add().CssClass("btn-accadminbast").Icon("chevronright").Hint("Create BAST")
.OnClick("function(e) { showAccbastPopup(e.row.data.dok_refnum, e.row.data.dok_status, e.row.data.dok_id); }");

         b.Add().CssClass("btn-approveuser").Icon("check").Hint("Acc User BAST")
    .OnClick("function(e) { showApproveUserPopup(e.row.data.dok_id, e.row.data.dok_status); }");

         b.Add().CssClass("btn-approvekadeptit").Icon("check").Hint("Acc Kadept IT SM BAST")
.OnClick("function(e) { showApproveKadeptITPopup(e.row.data.dok_id, e.row.data.dok_status); }");

     });

 })
 .Grouping(grouping => grouping.AutoExpandAll(false).ExpandMode(GridGroupingExpandMode.RowClick))
 .GroupPanel(groupPanel => groupPanel.Visible(true))
 .Paging(p => p.PageSize(10))
 .Pager(pager =>
 {
     pager.Visible(true);
     pager.DisplayMode(GridPagerDisplayMode.Full);
     pager.ShowPageSizeSelector(true);
     pager.AllowedPageSizes(new JS("[10, 50, 'all']"));
     pager.ShowInfo(true);
     pager.ShowNavigationButtons(true);
 })
.OnToolbarPreparing("onToolbarPreparing")
.OnSelectionChanged("onSelectionChanged")
.SearchPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(false))
.HeaderFilter(f => f.Visible(true))
.RemoteOperations(true))
        </div>


    </div>


    @(Html.DevExtreme().Popup()
    .ID("approveit-popup")
    .Visible(false)
    .Width(350)
    .Height(200)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .Title("Confirmation Approve")
    .ShowCloseButton(false)
    .ToolbarItems(items =>
    {
        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.Before)
            .Widget(widget => widget.Button()
                .Text("Yes")
                .OnClick("functionBtnApproveIt"));

        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.After)
            .Widget(widget => widget.Button()
                .Text("No")
                .OnClick("function() { $('#approveit-popup').dxPopup('instance').hide(); }"));
    })
    .Content(@<text>
        <div id="approveit-popup-content"></div>
    </text>)
)
    @(Html.DevExtreme().Popup()
    .ID("reject-popup")
    .Width(800)
    .Height(300)
    .Visible(false) // Jangan langsung tampil
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .HideOnParentScroll(true)
    .Title("Confirmation Reject")
    .Content(@<text>
        @(Html.DevExtreme().Form()
            .ID("rejectStatus") // Form ID harus sesuai dengan JS
            .ColCount(2)
            .FormData(new { dokId = "", dokRefnum = "", dokStatus = "" }) // Default nilai kosong
            .Items(items =>
            {

                items.AddSimple().DataField("dokRefnum")
                    .Label(label => label.Text("Dokumen Ref"))
                    .Editor(e => e.TextBox().ReadOnly(true));

                items.AddSimple().DataField("dokStatus")
                    .Label(label => label.Text("Status"))
                    .Editor(e => e.TextBox().ReadOnly(true));

                items.AddSimple()
                      .DataField("dok_reason_reject")
                      .Label(l => l.Text("Alasan Reject"))
                      .Editor(e => e.TextArea()
                          .Height(100) // atau lebih besar, misal 150-200 jika perlu
                          .MaxLength(500) // opsional: batas karakter
                      )
                      .ValidationRules(rules =>
                      {
                          rules.AddRequired().Message("Alasan Reject wajib diisi");
                      });

                items.AddSimple().DataField("dokId")
                    .Label(label => label.Text("Dokumen ID").Visible(false))
                    .Editor(e => e.TextBox().Visible(false).ReadOnly(true));


                items.AddButton()
                    .ColSpan(2)
                    .ButtonOptions(b => b
                        .Text("Submit")
                        .Type(ButtonType.Default)
                        .OnClick("rejectDokumen")
                    );
            })
            .LabelLocation(FormLabelLocation.Left)
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
        )
    </text>)
    .ShowCloseButton(true)
)
    @(Html.DevExtreme().Popup()
    .ID("approve-popup")
    .Visible(false)
    .Width(350)
    .Height(200)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .Title("Confirmation Approve")
    .Content(@<text>
        <div id="approve-popup-content"></div>
    </text>)
    .ShowCloseButton(false)
    .ToolbarItems(items =>
    {
        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.Before)
            .Widget(widget => widget.Button()
                .Text("Yes")
                .OnClick("functionBtnApprove"));

        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.After)
            .Widget(widget => widget.Button()
                .Text("No")
                .OnClick("function() { $('#approve-popup').dxPopup('instance').hide(); }"));
    })
)
    @(Html.DevExtreme().Popup()
    .ID("approveuser-popup")
    .Visible(false)
    .Width(350)
    .Height(200)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .Title("Confirmation Approve BAST User")
    .Content(@<text>
        <div id="approveuser-popup-content"></div>
    </text>)
    .ShowCloseButton(false)
    .ToolbarItems(items =>
    {
        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.Before)
            .Widget(widget => widget.Button()
                .Text("Yes")
                .OnClick("functionBtnApproveUser"));

        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.After)
            .Widget(widget => widget.Button()
                .Text("No")
                .OnClick("function() { $('#approveuser-popup').dxPopup('instance').hide(); }"));
    })
)
    @(Html.DevExtreme().Popup()
    .ID("approvekadeptit-popup")
    .Visible(false)
    .Width(350)
    .Height(200)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .Title("Confirmation Approve BAST Kadept IT SM")
    .Content(@<text>
        <div id="approvekadeptit-popup-content"></div>
    </text>)
    .ShowCloseButton(false)
    .ToolbarItems(items =>
    {
        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.Before)
            .Widget(widget => widget.Button()
                .Text("Yes")
                .OnClick("functionBtnApproveKadeptIT"));

        items.Add()
            .Toolbar(Toolbar.Bottom)
            .Location(ToolbarItemLocation.After)
            .Widget(widget => widget.Button()
                .Text("No")
                .OnClick("function() { $('#approvekadeptit-popup').dxPopup('instance').hide(); }"));
    })
)
    @(Html.DevExtreme().Popup()
    .ID("detail-popup")
    .Width(800)
    .Height(700)
    .Visible(true)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .HideOnParentScroll(true)
    .Title("Detail Dokumen Request")
    .Content(@<text>
        @(Html.DevExtreme().Form()
            .ID("formDetail")
            .ColCount(2)
            .Items(items =>
            {
                // Informasi Utama
                items.AddSimple().Label(label => label.Text("Reference Number"))
                    .Editor(e => e.TextBox().ID("txtDokRefnum").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("NPK"))
                    .Editor(e => e.TextBox().ID("txtUsrNpk").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Nama"))
                    .Editor(e => e.TextBox().ID("txtUsrNama").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("User ERP"))
                    .Editor(e => e.TextBox().ID("txtDokUserErp").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Plant"))
                    .Editor(e => e.TextBox().ID("txtDokPlant").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Section"))
                    .Editor(e => e.TextBox().ID("txtDokSection").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Request Modul"))
                    .Editor(e => e.TextBox().ID("txtDokReqModul").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Request By"))
                    .Editor(e => e.TextBox().ID("txtDokReqBy").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Status"))
                    .Editor(e => e.TextBox().ID("txtDokStatus").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Document"))
                    .Editor(e => e.TextBox().ID("txtDokDocument").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Attachment"))
                    .Editor(e => e.TextBox().ID("txtDokLampiran").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Create By"))
                   .Editor(e => e.TextBox().ID("txtCreateBy").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Approved By (Kadept)"))
                    .Editor(e => e.TextBox().ID("txtModifBy").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Approve By (Kadept IT)"))
                    .Editor(e => e.TextBox().ID("txtDokApproveK").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Reason"))
                    .Editor(e => e.TextArea().ID("txtDokReason").ReadOnly(true));

                items.AddSimple().Label(label => label.Text("Reason Reject"))
                    .Editor(e => e.TextArea()
                        .ID("txtDokReasonReject")
                        .ReadOnly(true)
                        .Width(500)
                    );

            })
            .LabelLocation(FormLabelLocation.Left)
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
        )

        <!-- ✅ Tambahkan DataGrid Detail di bawah form -->
        <br />
        <div id="detail-section" style="display: none;">
    <div><b>Detail Menu / Session</b></div>
    <div id="grid-detail-popup" style="margin-top: 10px;"></div>
</div>


    </text>)
    .ShowCloseButton(true)
)
    @(Html.DevExtreme().Popup()
    .ID("accadmin-popup")
    .Width(800)
    .Height(250)
    .Visible(false) // Jangan langsung tampil
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .HideOnParentScroll(true)
    .Title("Status Permintaan")
    .Content(@<text>
        @(Html.DevExtreme().Form()
            .ID("addAdmin") // Form ID harus sesuai dengan JS
            .ColCount(2)
            .FormData(new { dokId = "", dokRefnum = "", dokStatus = "" }) // Default nilai kosong
            .Items(items =>
            {

                items.AddSimple().DataField("dokRefnum")
                    .Label(label => label.Text("Dokumen Ref"))
                    .Editor(e => e.TextBox().ReadOnly(true)); // ReadOnly agar tidak bisa diubah

                items.AddSimple().DataField("dokStatus")
                    .Label(label => label.Text("Status"))
                    .Editor(e => e.TextBox().ReadOnly(true));

                items.AddSimple()
          .DataField("dok_tgl_pembuatan")
          .Label(l => l.Text("Tanggal Pembuatan"))
          .Editor(e => e.DateBox().Type(DateBoxType.Date).DateSerializationFormat("yyyy-MM-dd"))
          .ValidationRules(rules =>
          {
              rules.AddRequired().Message("Tanggal Pembuatan wajib diisi");
          });

                items.AddSimple()
                    .DataField("dok_tgl_efektif")
                    .Label(l => l.Text("Tanggal Efektif"))
                    .Editor(e => e.DateBox().Type(DateBoxType.Date).DateSerializationFormat("yyyy-MM-dd"))
                    .ValidationRules(rules =>
                    {
                        rules.AddRequired().Message("Tanggal Efektif wajib diisi");
                    });


                items.AddSimple().DataField("dokId")
                    .Label(label => label.Text("Dokumen ID").Visible(false))
                    .Editor(e => e.TextBox().Visible(false).ReadOnly(true));


                items.AddButton()
                    .ColSpan(2)
                    .ButtonOptions(b => b
                        .Text("Submit")
                        .Type(ButtonType.Default)
                        .OnClick("updateDokumen")
                    );
            })
            .LabelLocation(FormLabelLocation.Left)
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
        )
    </text>)
    .ShowCloseButton(true)
)
    @(Html.DevExtreme().Popup()
    .ID("accbast-popup")
    .Width(800)
    .Height(250)
    .Visible(false) // Jangan langsung tampil
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .HideOnParentScroll(true)
    .Title("Buat Berita Acara Serah Terima Data")
    .Content(@<text>
        @(Html.DevExtreme().Form()
            .ID("addBast")
            .ColCount(2)
            .FormData(new { dokId = "", dokRefnum = "", dokStatus = "", dok_dilaksanakan_bast = "System Departemen IT" }) // Default nilai kosong
            .Items(items =>
            {

                items.AddSimple().DataField("dokRefnum")
                    .Label(label => label.Text("Dokumen Ref"))
                    .Editor(e => e.TextBox().ReadOnly(true)); // ReadOnly agar tidak bisa diubah

                items.AddSimple().DataField("dokStatus")
                    .Label(label => label.Text("Status"))
                    .Editor(e => e.TextBox().ReadOnly(true));

                items.AddSimple()
          .DataField("dok_tgl_efektif_bast")
          .Label(l => l.Text("Tanggal Efektif / Berlaku"))
          .Editor(e => e.DateBox().Type(DateBoxType.Date).DateSerializationFormat("yyyy-MM-dd"))
          .ValidationRules(rules =>
          {
              rules.AddRequired().Message("Tanggal Efektif / Berlaku wajib diisi");
          });

                items.AddSimple()
     .DataField("dok_dilaksanakan_bast")
     .Label(l => l.Text("Dilaksanakan Oleh"))
     .Editor(e => e.TextBox().ReadOnly(true));



                items.AddSimple().DataField("dokId")
                    .Label(label => label.Text("Dokumen ID").Visible(false))
                    .Editor(e => e.TextBox().Visible(false).ReadOnly(true));


                items.AddButton()
                    .ColSpan(2)
                    .ButtonOptions(b => b
                        .Text("Submit")
                        .Type(ButtonType.Default)
                        .OnClick("updateBast")
                    );
            })
            .LabelLocation(FormLabelLocation.Left)
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
        )
    </text>)
    .ShowCloseButton(true)
)



    @using (Html.DevExtreme().NamedTemplate("fileUploaderTemplate"))
    {
        <div>
            @(Html.DevExtreme().FileUploader()
              .ID("dok_lampiran")
              .Name("file_attachment")
              .SelectButtonText("Pilih File")
              .LabelText("")
              .Multiple(false)
              .AllowedFileExtensions(new[] { ".pdf" })
              .MaxFileSize(10 * 1024 * 1024) // 10 MB
              .UploadMode(FileUploadMode.UseForm)
              .ShowFileList(true)
              .OnValueChanged("onFileUploaderValueChanged")
        )

            <div style="font-size: 12px; color: gray; margin-top: 5px;">
                *Hanya file PDF dan ukuran maksimal 10 MB.
            </div>
        </div>
    }



    @(Html.DevExtreme().Popup()
    .ID("form-scheduled")
    .Width(1150)
    .Height(750)
    .Visible(true)
    .DragEnabled(true)
    .Position(PositionAlignment.Center)
    .Container(".dx-viewport")
    .ShowTitle(true)
    .HideOnParentScroll(true)
    .Title("Add Dokumen Akses Modul / Session ERP")
    .Content(@<text>

    @{
        var priorities = new[] { "Manufacturing", "Warehouse", "Order Management", "Finance" };
    }
         <input type="hidden" id="dok_ttd_user" name="dok_ttd_user" />
    @(Html.DevExtreme().Form()
        .ID("formInputSchedule")
        .ColCount(2)
        .ScrollingEnabled(true)
        .Items(items =>
        {
            items.AddSimple().Label(label => label.Text("Reference Number")).Editor(e => e.TextBox().ID("reference_number").OnInitialized("onReferenceNumberInitialized").ReadOnly(true)).ColSpan(1);
            items.AddSimple().Label(label => label.Text("Plant")).Editor(e => e.TextBox().ID("plant").ReadOnly(true)).ColSpan(1);
            items.AddSimple().Label(label => label.Text("Full Name"))
            .Editor(e => e.SelectBox().DataSource(d => d.WebApi()
            .Controller("ManageMasterUserForm").Key("id_user"))
            .DisplayExpr("usr_nama").ValueExpr("id_user").SearchEnabled(true)
            .ID("id_user")
            .OnValueChanged("onUserSelected"))
             .ColSpan(1);

            items.AddSimple().Label(label => label.Text("Section / Department")).Editor(e => e.TextBox().ID("section_department").ReadOnly(true)).ColSpan(1);
            items.AddSimple()
            .Label(label => label.Text("ERP Name"))
            .Editor(e => e.TextBox()
                .ID("erp_name")
            )
            .ValidationRules(rules =>
            {
                rules.AddRequired().Message("ERP Name is required");
            })
            .ColSpan(1);

            items.AddSimple()
             .Label(label => label.Text("ERP"))
             .Editor(e => e.TextBox()
                 .ID("erp_id")
                 .ReadOnly(true)
                 .Value("infor"))
             .ColSpan(1);

            items.AddSimple()
            .Label(label => label.Text("Required Modules/Session"))
            .Editor(e => e.RadioGroup()
                .Items(priorities)
                .Value("")
                .Layout(Orientation.Horizontal)
                .ID("req_modul")
            )
            .ColSpan(1);

            items.AddSimple().Label(label => label.Text("NPK")).Editor(e => e.TextBox().ID("npk").ReadOnly(true)).ColSpan(1);

            // 🔹 Template untuk Grid (ditempatkan di luar Form)
            items.AddSimple().Template(new TemplateName("accessGridTemplate")).ColSpan(2);

            items.AddSimple().Label(label => label.Text("Attachment")).Template(new TemplateName("fileUploaderTemplate")).ColSpan(1);
            items.AddSimple().Label(label => label.Text("Dokumen")).Editor(e => e.TextBox().ID("dokumen")).ColSpan(2);
            items.AddSimple().Label(label => label.Text("Reason for Request")).Editor(e => e.TextBox().ID("reason").Width("100%").Height(100))
              .ValidationRules(rules =>
              {
                  rules.AddRequired().Message("Reason for Reqeust is required");
              })
              .ColSpan(2);
            items.AddButton().ColSpan(2).ButtonOptions(b => b.Text("Submit").Type(ButtonType.Default).OnClick("submitForm"));
        })
        .LabelLocation(FormLabelLocation.Left)
        .MinColWidth(300)
        .ReadOnly(false)
        .ShowColonAfterLabel(true)
    )

    </text>)
    .ShowCloseButton(true)
)


    <script type="text/html" id="accessGridTemplate">
        @(Html.DevExtreme().DataGrid()
        .ID("grid_detail_dokumen")
        .DataSource(new JS("[]")) // Awalnya kosong
        .ShowBorders(true)
        .Editing(editing => editing
        .Mode(GridEditMode.Row)
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(false) // Matikan icon default DX
        )
        .Columns(columns =>
        {
            columns.Add().DataField("menu_session")
                .Caption("Menu/Session")
                .Lookup(lookup => lookup
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/MenuSession.json").Key("ID"))
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

            columns.Add().DataField("id_menu")
                .Caption("ID Menu")
                .DataType(GridColumnDataType.String);

            columns.Add().DataField("access")
                .Caption("Access")
                .Lookup(lookup => lookup
                    .DataSource(d => d.StaticJson().Url("~/Content/json_data/AccessStatus.json").Key("ID"))
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

            columns.Add().DataField("note")
                .Caption("Note")
                .DataType(GridColumnDataType.String);
        })
    )
    </script>

    <div id="pdf-preview-modal" style="
    display:none;
    position:fixed;
    top:10%;
    left:10%;
    width:80%;
    height:80%;
    background:#fff;
    border:1px solid #ccc;
    box-shadow:0 0 10px rgba(0,0,0,0.5);
    z-index:10000;
    padding:10px;
">
        <button id="btn-close-pdf-preview" style="float:right; margin-bottom:5px;">X</button>
        <iframe id="pdf-preview-frame" style="width:100%; height:90%; border:none;"></iframe>
    </div>




    @section scripts
{
        <script src="~/Scripts/jspdf.umd.min.js"></script>
        <script src="~/Scripts/jspdf.plugin.autotable.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.1.6/dist/signature_pad.umd.min.js"></script>

        <script>
            window.jsPDF = window.jspdf.jsPDF;
        </script>
        <script>

            var userRole = "@logSession.userrole"; // Kirim userrole ke JavaScript

            function hideButtons() {
                if (userRole === "user") {
                    document.querySelectorAll(".btn-accadminbast, .btn-approve, .btn-reject, .btn-approveit, .btn-rejectit, .btn-accept, .btn-accadmin, .btn-approvekadeptit").forEach(el => el.style.display = "none");
                } else if (userRole === "kadept") {
                    document.querySelectorAll(".btn-accadminbast, .btn-edit, .btn-delete, .btn-approveit, .btn-rejectit, .btn-accept, .btn-accadmin, .btn-approvekadeptit").forEach(el => el.style.display = "none");
                } else if (userRole === "kadeptit") {
                    document.querySelectorAll(".btn-accadminbast, .btn-edit, .btn-delete, .btn-approve, .btn-reject, .btn-accept, .btn-accadmin").forEach(el => el.style.display = "none");
                } else if (userRole === "admin") {
                    document.querySelectorAll(".btn-edit, .btn-delete, .btn-approve, .btn-reject, .btn-approveit, .btn-rejectit, .btn-approvekadeptit").forEach(el => el.style.display = "none");
                }
                }


            document.addEventListener("DOMContentLoaded", function () {
                // Jalankan sekali saat halaman dimuat
                hideButtons();

                // Pantau perubahan dalam DataGrid
                const observer = new MutationObserver(() => {
                    hideButtons();
                });

                observer.observe(document.body, { childList: true, subtree: true });
            });
        </script>



        <script>
                let signaturePad;
                $(document).ready(function () {
                    // 🔒 Sembunyikan semua popup saat awal load
                    const popupIds = ["form-scheduled", "detail-popup", "accadmin-popup", "approveit-popup", "grid-detail-popup", "reject-popup", "approve-popup", "apporveuser-popup", "approvekadeptit-popup", "accadmin-popup", "accbast-popup"];
                    popupIds.forEach(id => {
                        const popupEl = document.getElementById(id);
                        if (popupEl) {
                            const popupInstance = DevExpress.ui.dxPopup.getInstance(popupEl);
                            if (popupInstance) popupInstance.hide();
                        }
                    });

                    // ⏳ Delay agar dxTextBox siap dulu
                    setTimeout(function () {
                        const npkInstance = DevExpress.ui.dxTextBox.getInstance($("#npk")[0]);
                        let npkValue = npkInstance ? npkInstance.option("value") : "";
                        if (!npkValue || isNaN(npkValue)) npkValue = "0";

                        console.log("📌 Nilai NPK sebelum hide:", npkValue);

                        // Hidden input untuk NPK
                        let hiddenNpk = $("#hidden_npk");
                        if (hiddenNpk.length === 0) {
                            $("#npk").after('<input type="hidden" id="hidden_npk">');
                            hiddenNpk = $("#hidden_npk");
                        }
                        hiddenNpk.val(npkValue);

                        // Sembunyikan field NPK & Dokumen
                        $("#npk").closest(".dx-field-item").hide();
                        $("#dokumen").closest(".dx-field-item").hide();
                    }, 500);

                    // ✅ Inisialisasi SignaturePad di canvas
                    const canvas = document.getElementById("signatureCanvas");
                    if (canvas) {
                        resizeCanvas(canvas);

                        signaturePad = new SignaturePad(canvas, {
                            backgroundColor: 'rgba(255,255,255,0)',
                            penColor: 'black'
                        });

                        signaturePad.onEnd = function () {
                            const base64 = signaturePad.toDataURL();
                            $("#dok_ttd_user").val(base64); // set hidden input
                            $("#previewSignature").attr("src", base64).show(); // optional preview
                            console.log("📝 Signature saved:", base64.substring(0, 30) + "...");
                        };
                    }
                });

                function clearSignature() {
                    if (signaturePad) {
                        signaturePad.clear();
                        $("#dok_ttd_user").val('');
                        $("#previewSignature").hide();
                        console.log("🧹 Signature cleared");
                    }
                }

                function resizeCanvas(canvas) {
                    const ratio = Math.max(window.devicePixelRatio || 1, 1);
                    canvas.width = canvas.offsetWidth * ratio;
                    canvas.height = canvas.offsetHeight * ratio;
                    canvas.getContext("2d").scale(ratio, ratio);
                }

            function onTextBoxInitialized(e) {
                console.log("TextBox initialized:", e.component.option("id"));
            }

                function getLastReferenceNumber() {
                    return new Promise((resolve, reject) => {
                        $.ajax({
                            url: "/api/ManageMasterDokumenRequest/GetLastReferenceNumber",
                            method: "GET",
                            cache: false,
                            success: function (data) {
                                resolve(data); // Sudah dalam format ERP-XXX-XXX
                            },
                            error: function (error) {
                                reject(error);
                            }
                        });
                    });
                }

            async function onReferenceNumberInitialized(e) {
                if (!isEditMode) { // hanya auto-generate jika bukan edit
                    try {
                        const referenceNumber = await getLastReferenceNumber();
                        e.component.option("value", referenceNumber);
                    } catch (error) {
                        console.error("Gagal mengambil nomor referensi:", error);
                    }
                }
            }


            function onGridContentReady(e) {
                const el = e.component.element();

                // Styling semua header kolom biasa (optional)
                el.find(".dx-datagrid-headers").css({
                    "background-color": "#4a90e2",  // contoh warna default header lain
                    "color": "white",
                    "font-weight": "bold"
                });

                // Styling khusus header kolom Print dan Action (hanya header)
                el.find(".dx-datagrid-headers th.dx-command-edit, .dx-datagrid-headers td.dx-command-edit").css({
                    "background-color": "#383c40",
                    "color": "white",
                    "font-weight": "bold"
                });

                // Styling ikon dan tombol di header Print dan Action
                el.find(".dx-datagrid-headers th.dx-command-edit .dx-button, .dx-datagrid-headers th.dx-command-edit .dx-icon, " +
                    ".dx-datagrid-headers td.dx-command-edit .dx-button, .dx-datagrid-headers td.dx-command-edit .dx-icon").css({
                        "color": "white"
                    });
            }

            function onRowPrepared(e) {
                if (e.rowType === "data") {
                    const status = e.data.dok_status;
                    const row = $(e.rowElement);

                    const hideRejectForStatuses = [1, 2, 3, 5, 6, 7];
                    const hideApproveForStatuses = [1, 2, 3,  5, 6, 7];
                    const hideRejectItForStatuses = [0, 2, 3, 5, 6, 7];
                    const hideApproveItForStatuses = [0, 2, 3, 5, 6, 7];
                    const hideAdminBastForStatuses = [0, 1, 2, 3, 5, 6, 7];
                    const hideAccAdminForStatuses = [0, 1, 2, 4,5, 6, 7];
                    const hideBtnUserForStatuses = [1, 2, 3, 4, 5, 6, 7];

                    setTimeout(() => {
                        if (["kadept", "kadeptit", "admin", "user"].includes(userRole)) {
                            // 🔒 Hide tombol Reject
                            if (hideRejectForStatuses.includes(status)) {
                                row.find("a.btn-reject.dx-icon-close").hide();
                            }

                            if (hideRejectItForStatuses.includes(status)) {
                                row.find("a.btn-rejectit.dx-icon-close").hide();
                            }

                            if (hideAdminBastForStatuses.includes(status)) {
                                row.find("a.btn-accadminbast.dx-icon-chevronright").hide();
                            }

                            if (hideAccAdminForStatuses.includes(status)) {
                                row.find("a.btn-accadmin.dx-icon-add").hide();
                            }

                            if (hideBtnUserForStatuses.includes(status)) {
                                row.find("a.btn-edit.dx-icon-edit").hide();
                                row.find("a.btn-delete.dx-icon-trash").hide();
                            }

                            // 🔍 BTN-APPROVEUSER: logic berdasarkan role
                            let btnaccuser = row.find("a.btn-approveuser.dx-icon-check");
                            if (userRole === "admin" && status === 5) {
                                console.log("🔒 Admin - Hide btn-approveuser (status 5)");
                                btnaccuser.hide();
                            } else if (userRole === "user" && status === 5) {
                                console.log("✅ User - Show btn-approveuser (status 5)");
                                btnaccuser.show();
                            } else if ([0, 1, 2, 3, 4, 6, 7].includes(status)) {
                                // Status selain 5 → tetap hide
                                btnaccuser.hide();
                            }


                            // 🔒 Approve & ApproveIT buttons
                            if (hideApproveForStatuses.includes(status)) {
                                row.find("a.btn-approve.dx-icon-check").hide();
                            }

                            if (hideApproveItForStatuses.includes(status)) {
                                row.find("a.btn-approveit.dx-icon-check").hide();
                            }

                            let btnKadeptIt = row.find("a.btn-approvekadeptit.dx-icon-check");
                            if (userRole === "kadeptit" && status === 6) {
                                btnKadeptIt.show();
                            } else {
                                btnKadeptIt.hide();
                            }
                        }
                    }, 50); // Delay to ensure button rendered
                }
            }




            function onFileUploaderValueChanged(e) {
                var files = e.value;
                if (files.length > 0) {
                    // Validasi tipe file
                    var fileName = files[0].name.toLowerCase();
                    if (!fileName.endsWith('.pdf')) {
                        DevExpress.ui.notify("Hanya file PDF yang diperbolehkan", "error", 3000);
                        e.component.reset();
                        return;
                    }

                    // Validasi ukuran file (10MB)
                    if (files[0].size > 10000000) {
                        DevExpress.ui.notify("Ukuran file tidak boleh lebih dari 10MB", "error", 3000);
                        e.component.reset();
                        return;
                    }
                }
                }

            function submitForm() {
                const fileUploader = $("#dok_lampiran").dxFileUploader("instance");
                const files = fileUploader.option("value");

                if (files && files.length > 0 && files[0] instanceof File) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const base64File = e.target.result.split(",")[1];
                        continueSubmit(base64File);
                    };
                    reader.readAsDataURL(files[0]);
                } else {
                    // Jika Edit, gunakan lampiran sebelumnya
                    continueSubmit(isEditMode ? savedLampiranBase64 || null : null);
                }
            }

            function continueSubmit(base64File) {
                // Ambil tanda tangan fallback jika kosong
                if (!$("#dok_ttd_user").val() && signaturePad && !signaturePad.isEmpty()) {
                    const fallbackBase64 = signaturePad.toDataURL();
                    $("#dok_ttd_user").val(fallbackBase64);
                }

                const formData = {
                    dok_refnum: $("#reference_number").dxTextBox("option", "value"),
                    usr_npk: $("#npk").dxTextBox("option", "value"),
                    usr_nama: $("#id_user").dxSelectBox("option", "text"),
                    id_user: $("#id_user").dxSelectBox("option", "value"),
                    dok_user_erp: $("#erp_name").dxTextBox("option", "value"),
                    dok_plant: $("#plant").dxTextBox("option", "value"),
                    dok_section: $("#section_department").dxTextBox("option", "value"),
                    dok_req_modul: $("#req_modul").dxRadioGroup("option", "value"),
                    dok_document: "Akses Modul/Session ERP",
                    dok_reason: $("#reason").dxTextBox("option", "value"),
                    dok_lampiran: base64File,
                    dok_ttd_user: $("#dok_ttd_user").val(),
                    DetailDokumenRequests: $("#grid_detail_dokumen").dxDataGrid("option", "dataSource").map(item => ({
                        dok_menu: item.menu_session,
                        dok_id_menu: item.id_menu,
                        dok_access: item.access,
                        dok_note: item.note || ""
                    }))
                };

                console.log("📦 Payload final:", formData);

                $.ajax({
                    url: isEditMode
                        ? `/api/ManageMasterDokumenRequest/Update?dokId=${currentDokId}`
                        : "/api/ManageMasterDokumenRequest",
                    type: isEditMode ? "PUT" : "POST",
                    contentType: "application/json",
                    data: JSON.stringify(formData),
                    success: function (response) {
                        DevExpress.ui.notify(response.Message, "success", 1500);
                        refreshTableDevExpress();
                        const popupInstance = $("#form-scheduled").dxPopup("instance");
                        if (popupInstance) {
                            popupInstance.hide();
                        }

                        // ✅ Reset form ke nilai default
                        const formInstance = $("#form-data").dxForm("instance");
                        if (formInstance) {
                            formInstance.resetValues(); // reset semua nilai ke default
                        }
                    },
                    error: function (xhr) {
                        let msg = "An error occurred!";
                        try {
                            const json = JSON.parse(xhr.responseText);
                            if (json.Message) {
                                msg = json.Message;
                            }
                        } catch (e) {
                            msg = xhr.responseText || msg;
                        }

                        DevExpress.ui.notify(msg, "error", 3000);
                    }

                });
            }
            $("#detail-section").hide();

            function loadDetailGrid(dataSource) {
                const container = document.getElementById("grid-detail-popup");
                const detailSection = document.getElementById("detail-section");

                if (!container) {
                    console.warn("📛 Elemen #grid-detail-popup tidak ditemukan!");
                    return;
                }

                // Sembunyikan kontainer sebelumnya jika sudah ada
                const oldGrid = DevExpress.ui.dxDataGrid.getInstance(container);
                if (oldGrid) {
                    oldGrid.dispose();
                }

                // Tampilkan "Detail Menu / Session" dan DataGrid
                $(detailSection).show(); // Menampilkan label dan DataGrid

                // Inisialisasi DataGrid
                $(container).dxDataGrid({
                    dataSource: dataSource || [],  // Data grid diisi dengan data yang diberikan
                    showBorders: true,
                    columns: [
                        { dataField: "dok_menu", caption: "Menu" },
                        { dataField: "dok_id_menu", caption: "ID Menu" },
                        { dataField: "dok_access", caption: "Access" },
                        { dataField: "dok_note", caption: "Note" }
                    ],
                    paging: { enabled: false },
                    columnAutoWidth: true,
                    wordWrapEnabled: true
                });
            }



            function resetForm() {
                // Reset Reference Number
                let referenceNumber = document.getElementById("reference_number");
                let instanceReferenceNumber = DevExpress.ui.dxTextBox.getInstance(referenceNumber);
                instanceReferenceNumber.option("value", "");
                instanceReferenceNumber.option("isValid", true);

                // Reset Plant
                let plant = document.getElementById("plant");
                let instancePlant = DevExpress.ui.dxTextBox.getInstance(plant);
                instancePlant.option("value", "");
                instancePlant.option("isValid", true);

                // Reset NPK
                let npk = document.getElementById("npk");
                let instanceNpk = DevExpress.ui.dxTextBox.getInstance(npk);
                instanceNpk.option("value", "");
                instanceNpk.option("isValid", true);

                // Reset User Selection
                let idUser = document.getElementById("id_user");
                let instanceIdUser = DevExpress.ui.dxSelectBox.getInstance(idUser);
                instanceIdUser.option("value", null);
                instanceIdUser.option("isValid", true);

                // Reset Section / Department
                let sectionDepartment = document.getElementById("section_department");
                let instanceSectionDepartment = DevExpress.ui.dxTextBox.getInstance(sectionDepartment);
                instanceSectionDepartment.option("value", "");
                instanceSectionDepartment.option("isValid", true);

                // Reset ERP Name
                let erpName = document.getElementById("erp_name");
                let instanceErpName = DevExpress.ui.dxTextBox.getInstance(erpName);
                instanceErpName.option("value", "");
                instanceErpName.option("isValid", true);

                // Reset Required Modules/Session
                let reqModul = document.getElementById("req_modul");
                let instanceReqModul = DevExpress.ui.dxRadioGroup.getInstance(reqModul);
                instanceReqModul.option("value", null);
                instanceReqModul.option("isValid", true);

                let sDokumen = document.getElementById("scheduled_dokumen");
                let instanceSDokumen = DevExpress.ui.dxSelectBox.getInstance(sDokumen);
                instanceSDokumen.option("value", "");
                instanceSDokumen.option("isValid", true);


                let lampiran = document.getElementById("dok_lampiran");
                let instanceLampiran = DevExpress.ui.dxFileUploader.getInstance(lampiran);
                instanceLampiran.option("value", "");
                instanceLampiran.option("isValid", true);

                let reason = document.getElementById("reason");
                let instanceReason = DevExpress.ui.dxTextBox.getInstance(reason);
                instanceReason.option("value", "");
                instanceReason.option("isValid", true);
            }

            function onUserSelected(e) {
                var selectedUserId = e.value;

                // Lakukan AJAX request untuk mendapatkan data user berdasarkan id_user
                $.ajax({
                    url: '/api/ManageMasterUserForm/GetUserById', // Sesuaikan dengan endpoint Anda
                    method: 'GET',
                    data: { id_user: selectedUserId },
                    success: function (data) {
                        var plantDescription = "";
                        var sectionDescription = "";
                        var npkDescription = data.usr_npk;

                        // Logika untuk plant
                        switch (data.usr_plant) {
                            case "K":
                                plantDescription = "Karawang";
                                break;
                            case "M":
                                plantDescription = "Semarang";
                                break;
                            default:
                                plantDescription = data.usr_plant; // Jika tidak ada mapping, gunakan nilai asli
                        }

                        // Logika untuk section
                        switch (data.usr_section) {
                            case "I":
                                sectionDescription = "IT";
                                break;
                            case "A":
                                sectionDescription = "Accouting";
                                break;
                            default:
                                sectionDescription = data.usr_section; // Jika tidak ada mapping, gunakan nilai asli
                        }

                        // Isi nilai plant dan section_department berdasarkan deskripsi
                        DevExpress.ui.dxTextBox.getInstance($("#plant")).option("value", plantDescription);
                        DevExpress.ui.dxTextBox.getInstance($("#section_department")).option("value", sectionDescription);
                        DevExpress.ui.dxTextBox.getInstance($("#npk")).option("value", npkDescription);
                    },
                    error: function (error) {
                        console.error("Error fetching user data:", error);
                    }
                });
            }


        function testing() {

            let dataForm = document.getElementById("formInputSchedule");
            let form = DevExpress.ui.dxForm.getInstance(dataForm);
            form.option("items[0].items[1].editorOptions.value", "coba ni");
            console.log(form.option("items[0].items[1]"));

            }

                function functionPrintDocument(e) {
                    const doc = new jsPDF('p', 'mm', 'a4');

                    doc.setFontSize(8);
                    doc.setFont('Tahoma', 'bold');
                    doc.text('Form I1-KM.022', 5, 4);
                    const logoURL = '/Content/images-new/logo_gs_battery_dark.jpg';
                    doc.addImage(logoURL, 'PNG', 10, 10, 54, 15);

                    doc.setDrawColor(150);
                    doc.setLineWidth(0.5);
                    doc.rect(9, 9, 56, 20);

                    doc.setFontSize(15);
                    doc.setFont('Tahoma', 'bold');
                    doc.text('FORM PENGAJUAN AKSES', 95, 16);
                    doc.setLineWidth(0.5);
                    doc.rect(65, 9, 136, 10);
                    doc.text('MODUL / SESSION ERP', 100, 26);
                    doc.rect(65, 19, 136, 10);

                    doc.rect(9, 30, 192, 264);

                    doc.setDrawColor(200, 200, 200);
                    doc.setFillColor(200, 200, 200);
                    doc.rect(11, 32, 188, 5, 'FD');
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text("I. PERMINTAAN USER", 15, 36);

                    const grid = e.component;
                    const selectedRow = e.row.data;

                    if (!selectedRow) {
                        DevExpress.ui.notify("Pilih satu baris untuk dicetak.", "error", 2000);
                        return;
                    }

                    const dokRefNum = selectedRow.dok_refnum || "-";
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`NO. REFERENSI                    :`, 15, 42);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${dokRefNum}`, 62, 42);

                    const dokPlant = selectedRow.dok_plant || "-";
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`PLANT                                    :`, 130, 42);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${dokPlant}`, 175, 42);

                    const usrNama = selectedRow.usr_nama || "-";
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`NAMA LENGKAP / NPK      :`, 15, 50);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${usrNama}`, 62, 50);

                    const dokSection = selectedRow.dok_section || "-";
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`SEKSI / DEPARTEMEN      :`, 130, 50);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${dokSection}`, 175, 50);

                    // Ambil nilai dok_user_erp dengan pengecekan yang lebih ketat
                    const dokUsrErp = selectedRow.dok_user_erp ? selectedRow.dok_user_erp : "-";
                    console.log("dok_user_erp:", dokUsrErp); // Debugging: Periksa nilai dok_user_erp

                    // Tambahkan dok_user_erp ke PDF
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`ERP ACCOUNT / ID              :`, 15, 58);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${dokUsrErp}`, 62, 58);

                    const dokErp = selectedRow.dok_erp || "-";
                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`ERP                                         :`, 130, 58);
                    doc.setFont('Tahoma', 'normal');
                    doc.text(`${dokErp}`, 175, 58);

                    const dokReqModul = selectedRow.dok_req_modul || "-";

                    doc.setFont('Tahoma', 'bold');
                    const modulOptions = ["Manufacturing", "Warehouse", "Order Management", "Finance"];
                    const leftColumnX = 62;
                    const rightColumnX = 130;
                    let rowY = 60;
                    let rowY1 = 70;

                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text("MODUL / SESSION               :", 15, rowY1);
                    doc.text("YANG DIBUTUHKAN*", 15, rowY1 + 10);

                    for (let i = 0; i < modulOptions.length; i++) {
                        const modul = modulOptions[i];
                        const isChecked = dokReqModul.includes(modul) ? "[ x ]" : "[   ]";
                        const columnX = i % 2 === 0 ? leftColumnX : rightColumnX;
                        const columnY = rowY + Math.floor(i / 2) * 10 + 10;

                        doc.setFont('Tahoma', 'bold');
                        doc.text(`${isChecked} ${modul}`, columnX, columnY);
                    }

                    const isLainnya = !modulOptions.some(modul => dokReqModul.includes(modul));
                    const lainnyaTextX = leftColumnX;
                    const lainnyaTextY = rowY + Math.ceil(modulOptions.length / 2) * 10 + 10;

                    if (isLainnya) {
                        doc.setFont('Tahoma', 'bold');
                        doc.text(`[ X ] Lainnya : ${dokReqModul}`, lainnyaTextX, lainnyaTextY);
                    } else {
                        doc.setFont('Tahoma', 'bold');
                        doc.text("[   ] Lainnya :", lainnyaTextX, lainnyaTextY);
                    }

                    doc.setFontSize(10);
                    doc.setFont('Tahoma', 'bold');
                    doc.text(`MENU / SESSION YANG DIMINTA:`, 15, 98);

                    const headers = [
                        { header: "NO", dataKey: "no", width: 8 },
                        { header: "MENU / SESSION", dataKey: "menu", width: 50 },
                        { header: "ID MENU", dataKey: "idMenu", width: 25 },
                        { header: "Akses", dataKey: "akses", width: 30 },
                        { header: "KETERANGAN", dataKey: "keterangan", width: 40 }
                    ];

                    const detailList = selectedRow.DetailDokumenRequests || [];

                    const rows = detailList.map((item, index) => ({
                        no: (index + 1).toString(),
                        menu: item.dok_menu || "-",
                        idMenu: item.dok_id_menu || "-",
                        akses: item.dok_access || "-",
                        keterangan: item.dok_note || "-"
                    }));

                    if (rows.length === 0) {
                        rows.push({
                            no: "1",
                            menu: "Tidak ada data",
                            idMenu: "-",
                            akses: "-",
                            keterangan: "-"
                        });
                    }

                    doc.autoTable({
                        startY: 100,
                        head: [headers.map(header => header.header)],
                        body: rows.map(row => headers.map(header => row[header.dataKey])),
                        columnStyles: headers.reduce((styles, header) => {
                            styles[header.dataKey] = { cellWidth: header.width };
                            return styles;
                        }, {}),
                        theme: 'grid',
                        styles: {
                            font: 'Tahoma',
                            fontSize: 10,
                            textColor: [0, 0, 0],
                            lineColor: [0, 0, 0],
                            lineWidth: 0.1,
                            cellPadding: 1.5
                        },
                        headStyles: {
                            fillColor: [255, 255, 255],
                            textColor: [0, 0, 0],
                            fontStyle: 'bold',
                            lineColor: [0, 0, 0],
                            lineWidth: 0.1,
                            cellPadding: 1.5
                        },
                        bodyStyles: {
                            textColor: [0, 0, 0],
                            lineColor: [0, 0, 0],
                            lineWidth: 0.1,
                            cellPadding: 1.5
                        }
                    });

                    // ✅ Ambil posisi Y terakhir dari tabel
                    const endOfTableY = doc.autoTable.previous.finalY || 110;


                    // ✅ Ambil posisi Y terakhir dari tabel MENU / SESSION
                    let currentY = doc.autoTable.previous.finalY || 110;

                    // ===============================
                    // ALASAN PERMINTAAN
                    // ===============================
                    doc.setFontSize(10).setFont('Tahoma', 'bold');
                    doc.text(`ALASAN PERMINTAAN MODUL / SESSION:`, 15, currentY + 5);

                    const boxX = 15;
                    const boxY = currentY + 8;
                    const boxHeight = 20;

                    doc.setDrawColor(0).setLineWidth(0.5);
                    doc.rect(boxX, boxY, 180, boxHeight);

                    doc.setFont('Tahoma', 'normal');
                    doc.text(selectedRow.dok_reason || "Tidak ada alasan", boxX + 2, boxY + 10);



                    // ===============================
                    // TANDA TANGAN USER - KADEPT - IT
                    // ===============================
                    let ySignature = boxY + boxHeight + 3;
                    const colWidth = 60;

                    ["USER", "KADEPT", "KADEPT IT SM"].forEach((title, i) => {
                        const x = boxX + i * colWidth;
                        doc.setDrawColor(0);
                        doc.setLineWidth(0.5);
                        doc.rect(x, ySignature, colWidth, 8);  // Header
                        doc.rect(x, ySignature, colWidth, 30); // Box
                        doc.setFont('Tahoma', 'bold').setFontSize(10);
                        doc.text(title, x + 5, ySignature + 5);

                        let ttdData = null;
                        if (i === 0) ttdData = selectedRow.dok_ttd_user;
                        else if (i === 1) ttdData = selectedRow.dok_ttd_kadept;
                        else if (i === 2) ttdData = selectedRow.dok_ttd_kadeptit;

                        console.log(`TTD ${title}:`, ttdData ? `Ada, length: ${ttdData.length}` : 'Kosong/null');

                        if (ttdData) {
                            // Gambar kotak merah dulu untuk debug posisi

                            try {
                                doc.addImage(
                                    ttdData,
                                    'PNG',
                                    x + 5,
                                    ySignature + 9,
                                    colWidth - 10,
                                    15
                                );
                                console.log(`TTD ${title} berhasil ditambahkan ke PDF.`);
                            } catch (e) {
                                console.error(`Error saat menambahkan TTD ${title}:`, e);
                            }
                        } else {
                            console.warn(`TTD ${title} tidak ada, tidak ditambahkan.`);
                        }
                    });

                    let yText = ySignature + 30 - 2;

                    // ===============================
                    // NAMA & TANGGAL - 1 Baris Setiap Kolom
                    // ===============================

                    const formatDate = (d) => {
                        const date = new Date(d);
                        return isNaN(date) ? "-" : date.toLocaleString("id-ID", {
                            day: "2-digit", month: "2-digit", year: "numeric",
                        });
                    };

                    const createBy = selectedRow.createBy || "-";
                    const modifBy = selectedRow.modifBy || "-";
                    const dokApproveK = selectedRow.dok_approve_k || "-";

                    const createDate = formatDate(selectedRow.createDate);
                    const modifDate = formatDate(selectedRow.modifDate || "-");
                    const modifDateK = formatDate(selectedRow.modifDate_k || "-");

                    doc.setFont('Tahoma', 'bold').setFontSize(9);

                    // USER
                    doc.text(`Nama & Tanggal : ${createBy}, ${createDate}`, boxX + 2, yText);

                    // KADEPT
                    doc.text(`Nama & Tanggal : ${modifBy}, ${modifDate}`, boxX + colWidth + 2, yText);

                    // KADEPT IT SM
                    doc.text(`Nama & Tanggal : ${dokApproveK}, ${modifDateK}`, boxX + colWidth * 2 + 2, yText);

                    // Tanggal Penerimaan di IT
                    doc.setFont('Tahoma', 'normal').setFontSize(9);
                    doc.text("Tanggal Penerimaan Di IT:", boxX + 2 + colWidth * 2, yText + 7);
                    doc.text(modifDateK.split(",")[0], boxX + 2 + colWidth * 2 + 40, yText + 7);


                    // ===============================
                    // BLOK II. DIISI OLEH IT
                    // ===============================
                    let yIT = yText + 10;

                    doc.setDrawColor(200, 200, 200);
                    doc.setFillColor(200, 200, 200);
                    doc.rect(11, yIT, 188, 5, 'FD');

                    doc.setFont('Tahoma', 'bold').setFontSize(10);
                    doc.text("II. DIISI OLEH IT", 15, yIT + 4);
                    doc.text("Status Permintaan :", 15, yIT + 10);

                    // Tabel IT
                    const tableIT_Y = yIT + 13;
                    const colITWidth = 60;
                    const rowHeight = 20;

                    const tglPembuatan = selectedRow.dok_tgl_pembuatan
                        ? new Date(selectedRow.dok_tgl_pembuatan).toLocaleDateString("id-ID")
                        : "-";

                    const tglEfektif = selectedRow.dok_tgl_efektif
                        ? new Date(selectedRow.dok_tgl_efektif).toLocaleDateString("id-ID")
                        : "-";

                    const dilaksanakanOleh = selectedRow.dok_dilaksanakan || "-";

                    ["Tanggal Pembuatan Akses Data", "Tanggal Efektif", "Dilaksanakan Oleh"].forEach((text, i) => {
                        const x = boxX + i * colITWidth;

                        // Kotak
                        doc.setDrawColor(0).setLineWidth(0.5);
                        doc.rect(x, tableIT_Y, colITWidth, 6);          // Header
                        doc.rect(x, tableIT_Y, colITWidth, rowHeight);  // Full box

                        // 👉 Header Bold
                        doc.setFont('Tahoma', 'bold').setFontSize(10);
                        doc.text(text, x + 5, tableIT_Y + 4);

                        // 👉 Isi (teks atau gambar)
                        if (i === 2 && selectedRow.dok_dilaksanakan) {
                            // Tampilkan tanda tangan
                            doc.addImage(
                                selectedRow.dok_dilaksanakan,
                                'PNG',
                                x + 5,
                                tableIT_Y + 8,
                                colITWidth - 10,
                                12
                            );

                            // Tampilkan nama di bawah tanda tangan
                            if (selectedRow.dok_dilaksanakan_by) {
                                doc.setFont('Tahoma', 'bold').setFontSize(9);
                                doc.text(`Nama: ${selectedRow.dok_dilaksanakan_by}`, x + 3, tableIT_Y + 18);
                            }
                        } else {
                            // Untuk kolom 0 & 1 atau jika belum ada TTD
                            let value = "-";
                            if (i === 0) value = tglPembuatan;
                            if (i === 1) value = tglEfektif;

                            doc.setFont('Tahoma', 'normal').setFontSize(9);
                            doc.text(value, x + 5, tableIT_Y + 11);
                        }
                    });




                    // ===============================
                    // BLOK III. SERAH TERIMA DATA
                    // ===============================

                    let ySerahTerima = tableIT_Y + rowHeight + 5; // Geser posisi ke bawah

                    // Header "III. SERAH TERIMA DATA"
                    doc.setDrawColor(200, 200, 200);
                    doc.setFillColor(200, 200, 200);
                    doc.rect(11, ySerahTerima, 188, 6, 'FD');

                    doc.setFont('Tahoma', 'bold').setFontSize(10);
                    doc.text("III. SERAH TERIMA DATA", 15, ySerahTerima + 4);

                    // BERITA ACARA SERAH TERIMA
                    let yBeritaAcara = ySerahTerima + 10;
                    doc.setFont('Tahoma', 'bold').setFontSize(9);
                    doc.text("BERITA ACARA SERAH TERIMA AKSES DATA :", 15, yBeritaAcara);

                    // Deskripsi
                    let yTextAcara = yBeritaAcara + 6;
                    doc.setFont('Tahoma', 'italic').setFontSize(9);
                    doc.text(`" Departemen IT dengan ini menyatakan bahwa telah melakukan sosialisasi penggunaan Akses Data kepada Pemohon "`, 15, yTextAcara);

                    // Tanggal Efektif
                    let yTanggalEfektif = yTextAcara + 10;
                    doc.setFont('Tahoma', 'bold').setFontSize(9);
                    doc.text("Tanggal Efektif / Berlaku  :", 15, yTanggalEfektif);
                    doc.setDrawColor(0);
                    doc.rect(70, yTanggalEfektif - 4, 120, 6);

                    // 🟢 Isi Tanggal Efektif BAST
                    if (selectedRow.dok_tgl_efektif_bast) {
                        const tglEfektifBAST = new Date(selectedRow.dok_tgl_efektif_bast).toLocaleDateString("id-ID");
                        doc.setFont('Tahoma', 'normal').setFontSize(9);
                        doc.text(tglEfektifBAST, 72, yTanggalEfektif);
                    } else {
                        doc.setFont('Tahoma', 'normal').setFontSize(9);
                        doc.text("-", 72, yTanggalEfektif);
                    }

                    // Dilaksanakan Oleh
                    let yDilaksanakan = yTanggalEfektif + 8;
                    doc.setFont('Tahoma', 'bold').setFontSize(9);
                    doc.text("Dilaksanakan Oleh           :", 15, yDilaksanakan);
                    doc.rect(70, yDilaksanakan - 4, 120, 6);

                    // 🟢 Isi Dilaksanakan Oleh BAST
                    if (selectedRow.dok_dilaksanakan_bast) {
                        doc.setFont('Tahoma', 'normal').setFontSize(9);
                        doc.text(selectedRow.dok_dilaksanakan_bast, 72, yDilaksanakan);
                    } else {
                        doc.setFont('Tahoma', 'normal').setFontSize(9);
                        doc.text("-", 72, yDilaksanakan);
                    }


                    // ===============================
                    // TABEL UNTUK USER & KADEPT IT SM
                    // ===============================
                    let yTandaTangan = yDilaksanakan + 5;
                    const colSignWidth = 90;
                    const rowSignHeight = 25;

                    // Loop untuk USER & KADEPT IT SM
                    ["USER", "KADEPT IT SM"].forEach((title, i) => {
                        const x = 15 + i * colSignWidth;

                        // Header
                        doc.setDrawColor(0);
                        doc.setLineWidth(0.5);
                        doc.rect(x, yTandaTangan, colSignWidth, 8);
                        doc.text(title, x + 25, yTandaTangan + 5);

                        // Box tanda tangan
                        doc.rect(x, yTandaTangan, colSignWidth, rowSignHeight);

                        // Isi tanda tangan
                        const ttdX = x + 5;
                        const ttdY = yTandaTangan + 10;
                        const ttdW = colSignWidth - 10;
                        const ttdH = 12;

                        if (i === 0 && selectedRow.dok_ttd_user_bast) {
                            doc.addImage(
                                selectedRow.dok_ttd_user_bast,
                                'PNG',
                                ttdX,
                                ttdY,
                                ttdW,
                                ttdH
                            );
                        }

                        if (i === 1 && selectedRow.dok_ttd_kadeptit_bast) {
                            doc.addImage(
                                selectedRow.dok_ttd_kadeptit_bast,
                                'PNG',
                                ttdX,
                                ttdY,
                                ttdW,
                                ttdH
                            );
                        }

                        // Nama & Tanggal
                        const yNamaTanggal = yTandaTangan + rowSignHeight - 2;
                        doc.setFont('Tahoma', 'bold').setFontSize(9);

                        const nama = i === 0 ? (selectedRow.dok_user_bast || "-") : (selectedRow.dok_kadeptit_bast || "-");
                        const tanggalRaw = i === 0 ? selectedRow.dok_tgl_user_bast : selectedRow.dok_tgl_kadeptit_bast;

                        const tanggal = tanggalRaw
                            ? new Date(tanggalRaw).toLocaleDateString("id-ID", { day: "2-digit", month: "2-digit", year: "numeric" })
                            : "-";

                        doc.text(`Nama / Tanggal : ${nama}, ${tanggal}`, x + 2, yTandaTangan + rowSignHeight - 2);
                    });



                    // ===============================
                    // GARIS LUAR (border besar)
                    // ===============================
                    doc.setDrawColor(150);
                    doc.setLineWidth(0.5);
                    doc.rect(5, 5, 200, 290);


                    const blob = doc.output("blob");
                    const url = URL.createObjectURL(blob);

                    // Set src iframe ke URL blob PDF
                    $("#pdf-preview-frame").attr("src", url);

                    // Tampilkan modal popup
                    $("#pdf-preview-modal").show();

                    // Setup tombol close modal
                    $("#btn-close-pdf-preview").off("click").on("click", function () {
                        $("#pdf-preview-modal").hide();
                        $("#pdf-preview-frame").attr("src", "");
                        URL.revokeObjectURL(url);
                    });

                }


            function showInfoAdminPopup(
                dokRefnum,
                usrNpk,
                usrNama,
                dokUserErp,
                dokPlant,
                dokSection,
                dokErp,
                dokReqModul,
                dokReqBy,
                dokStatus,
                dokMenu,
                dokIdMenu,
                dokAccess,
                dokNote,
                dokReason,
                createBy,
                modifBy,
                createDate,
                modifDate,
                dokLampiran,
                dokDocument,
                dokApproveK,
                detailList,
                dokReasonReject
            ) {
                const popupElement = document.getElementById("detail-popup");
                const popup = DevExpress.ui.dxPopup.getInstance(popupElement);

                const statusMap = {
                    0: "Waiting Approval Kadept",
                    1: "Waiting Approval Kadept IT",
                    2: "Reject",
                    3: "On Progress",
                    4: "Waiting BAST",
                    5: "Waiting BAST User",
                    6: "Waiting BAST Kadept IT",
                    7: "Done"
                };

                // Set semua field
                const fieldValues = {
                    "#txtDokRefnum": dokRefnum,
                    "#txtUsrNpk": usrNpk,
                    "#txtUsrNama": usrNama,
                    "#txtDokUserErp": dokUserErp,
                    "#txtDokPlant": dokPlant,
                    "#txtDokSection": dokSection,
                    "#txtDokErp": dokErp,
                    "#txtDokReqModul": dokReqModul,
                    "#txtDokReqBy": usrNama,
                    "#txtDokStatus": statusMap[dokStatus] || "",
                    "#txtDokReason": dokReason,
                    "#txtCreateBy": createBy,
                    "#txtModifBy": modifBy,
                    "#txtDokLampiran": dokLampiran,
                    "#txtDokDocument": dokDocument,
                    "#txtDokApproveK": dokApproveK,
                    "#txtDokReasonReject": dokReasonReject
                };

                for (const selector in fieldValues) {
                    let instance = null;

                    // Gunakan dxTextArea untuk field tertentu
                    if (selector === "#txtDokReason" || selector === "#txtDokReasonReject") {
                        instance = $(selector).dxTextArea("instance");
                    } else {
                        instance = $(selector).dxTextBox("instance");
                    }

                    if (instance) {
                        instance.option("value", fieldValues[selector]);
                    } else {
                        console.warn("⚠️ Input tidak ditemukan:", selector);
                    }
                }

                // ✅ Load detail list ke DataGrid
                if (Array.isArray(detailList)) {
                    loadDetailGrid(detailList);
                } else {
                    loadDetailGrid([]); // default empty
                    console.warn("⚠️ DetailDokumenRequests kosong atau tidak valid.");
                }

                popup.show();
            }


            function showRejectPopup(dokRefnum, dokStatus, dokId) {
                let dataPopUp = document.getElementById("reject-popup");

                if (!dataPopUp) {
                    console.error("Element dengan ID 'reject-popup' tidak ditemukan.");
                    return;
                }

                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                if (!popup) {
                    console.error("dxPopup belum diinisialisasi atau tidak ditemukan.");
                    return;
                }

                popup.show(); // Pastikan popup ditampilkan dulu

                setTimeout(() => {
                    let form = $("#rejectStatus").dxForm("instance"); // Ambil instance Form

                    if (!form) {
                        console.error("Form 'rejectStatus' tidak ditemukan.");
                        return;
                    }

                    // Mapping dokStatus ke teks yang sesuai
                    const statusMapping = {
                        7: "Done",
                        6: "Waiting BAST Kadept IT",
                        5: "Waiting BAST User",
                        4: "Waiting BAST",
                        3: "On Progress",
                        2: "Reject",
                        1: "Waiting Approval Kadept IT",
                        0: "Waiting Approval Kadept"
                    };

                    let statusText = statusMapping[dokStatus] || "Status Tidak Diketahui";

                    // Set nilai inputan di dalam Form
                    form.option("formData", {
                        dokId: dokId,
                        dokRefnum: dokRefnum,
                        dokStatus: statusText
                    });

                    console.log("Popup dibuka dengan data:", dokRefnum, statusText, dokId);
                }, 300); // Tunggu 300ms agar form terinisialisasi
            }

            function rejectDokumen(e) {
                let form = $("#rejectStatus").dxForm("instance");

                if (!form) {
                    console.error("Form 'rejectStatus' tidak ditemukan.");
                    return;
                }

                let isValid = form.validate().isValid;

                if (!isValid) {
                    DevExpress.ui.notify("Harap lengkapi semua isian yang wajib!", "warning", 3000);
                    return;
                }

                let formData = form.option("formData");

                $.ajax({
                    url: "/api/ManageMasterDokumenRequest/RejectDokumen",
                    type: "PUT",
                    data: formData,
                    success: function (response) {
                        DevExpress.ui.notify(response.Message, "success", 3000);
                        $("#reject-popup").dxPopup("instance").hide();
                        $("#gridContainer").dxDataGrid("instance").refresh();
                    },
                    error: function (xhr) {
                        let errorMessage = xhr.responseJSON ? xhr.responseJSON.Message : "Terjadi kesalahan";
                        DevExpress.ui.notify(errorMessage, "error", 3000);
                    }
                });
            }


                function showAccadminPopup(dokRefnum, dokStatus, dokId) {
                    let dataPopUp = document.getElementById("accadmin-popup");

                    if (!dataPopUp) {
                        console.error("Element dengan ID 'accadmin-popup' tidak ditemukan.");
                        return;
                    }

                    let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                    if (!popup) {
                        console.error("dxPopup belum diinisialisasi atau tidak ditemukan.");
                        return;
                    }

                    popup.show();

                    setTimeout(() => {
                        let form = $("#addAdmin").dxForm("instance"); // Ambil instance Form

                        if (!form) {
                            console.error("Form 'addAdmin' tidak ditemukan.");
                            return;
                        }

                        // Mapping dokStatus ke teks yang sesuai
                        const statusMapping = {
                            7: "Done",
                            6: "Waiting BAST Kadept IT",
                            5: "Waiting BAST User",
                            4: "Waiting BAST",
                            3: "On Progress",
                            2: "Reject",
                            1: "Waiting Approval Kadept IT",
                            0: "Waiting Approval Kadept"
                        };

                        let statusText = statusMapping[dokStatus] || "Status Tidak Diketahui";

                        // Set nilai inputan di dalam Form
                        form.option("formData", {
                            dokId: dokId,
                            dokRefnum: dokRefnum,
                            dokStatus: statusText // Menampilkan teks status
                        });

                        console.log("Popup dibuka dengan data:", dokRefnum, statusText, dokId);
                    }, 300); // Tunggu 300ms agar form terinisialisasi
                }


                function updateDokumen(e) {
                    let form = $("#addAdmin").dxForm("instance");

                    if (!form) {
                        console.error("Form 'addAdmin' tidak ditemukan.");
                        return;
                    }

                    let isValid = form.validate().isValid;

                    if (!isValid) {
                        DevExpress.ui.notify("Harap lengkapi semua isian yang wajib!", "warning", 3000);
                        return;
                    }

                    let formData = form.option("formData");

                    $.ajax({
                        url: "/api/ManageMasterDokumenRequest/UpdateDokumen",
                        type: "PUT",
                        data: formData,
                        success: function (response) {
                            DevExpress.ui.notify(response.Message, "success", 3000);
                            $("#accadmin-popup").dxPopup("instance").hide();
                            $("#gridContainer").dxDataGrid("instance").refresh();
                        },
                        error: function (xhr) {
                            let errorMessage = xhr.responseJSON ? xhr.responseJSON.Message : "Terjadi kesalahan";
                            DevExpress.ui.notify(errorMessage, "error", 3000);
                        }
                    });
                }

            function showAccbastPopup(dokRefnum, dokStatus, dokId) {
                let dataPopUp = document.getElementById("accbast-popup");

                if (!dataPopUp) {
                    console.error("Element dengan ID 'accbast-popup' tidak ditemukan.");
                    return;
                }

                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                if (!popup) {
                    console.error("dxPopup belum diinisialisasi atau tidak ditemukan.");
                    return;
                }

                popup.show(); // Pastikan popup ditampilkan dulu

                setTimeout(() => {
                    let form = $("#addBast").dxForm("instance"); // Ambil instance Form

                    if (!form) {
                        console.error("Form 'addBast' tidak ditemukan.");
                        return;
                    }

                    const statusMapping = {
                        7: "Done",
                        6: "Waiting BAST Kadept IT",
                        5: "Waiting BAST User",
                        4: "Waiting BAST",
                        3: "On Progress",
                        2: "Reject",
                        1: "Waiting Approval Kadept IT",
                        0: "Waiting Approval Kadept"
                    };

                    let statusText = statusMapping[dokStatus] || "Status Tidak Diketahui";

                    form.option("formData", {
                        dokId: dokId,
                        dokRefnum: dokRefnum,
                        dokStatus: statusText,
                        dok_dilaksanakan_bast: "System Departemen IT" // Tambahkan ini supaya tidak hilang
                    });

                    console.log("Popup dibuka dengan data:", dokRefnum, statusText, dokId);
                }, 300);
            }

            function updateBast(e) {
                let form = $("#addBast").dxForm("instance");

                if (!form) {
                    console.error("Form 'addBast' tidak ditemukan.");
                    return;
                }

                let isValid = form.validate().isValid;

                if (!isValid) {
                    DevExpress.ui.notify("Harap lengkapi semua isian yang wajib!", "warning", 3000);
                    return;
                }

                let formData = form.option("formData");

                $.ajax({
                    url: "/api/ManageMasterDokumenRequest/UpdateBast",
                    type: "PUT",
                    data: formData,
                    success: function (response) {
                        DevExpress.ui.notify(response.Message, "success", 3000);
                        $("#accbast-popup").dxPopup("instance").hide();
                        $("#gridContainer").dxDataGrid("instance").refresh();
                    },
                    error: function (xhr) {
                        let errorMessage = xhr.responseJSON ? xhr.responseJSON.Message : "Terjadi kesalahan";
                        DevExpress.ui.notify(errorMessage, "error", 3000);
                    }
                });
            }



            function showApprovePopup(dokId, dokStatus) {
                let dataPopUp = document.getElementById("approve-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                if (dokStatus === undefined || dokStatus === null) {
                    dokStatus = -1; // Jika tidak ada status, beri nilai default -1
                }

                popup.option({
                    dokId: dokId,
                    dokStatus: dokStatus // Pastikan dokStatus tersimpan di popup
                });

                console.log("Popup dibuka dengan Dokumen ID:", dokId, "Status:", dokStatus);

                popup.show();
            }

           function functionBtnApprove() {
               let dataPopUp = document.getElementById("approve-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                let dokId = popup.option("dokId");
                let dokStatus = popup.option("dokStatus"); // Ambil dok_status dari popup
                var userRole = "@logSession.userrole";

                console.log("Dokumen ID:", dokId);
                console.log("Dokumen Status sebelum validasi:", dokStatus);
                console.log("User Role:", userRole);
                console.log("Popup Options:", popup.option()); // Debugging

                if (!dokId) {
                    DevExpress.ui.notify("Dokumen ID tidak valid!", "error", 2000);
                    return;
                }

                if (dokStatus === undefined || dokStatus === null) {
                    DevExpress.ui.notify("Gagal mendapatkan status dokumen!", "error", 2000);
                    return;
                }

                dokStatus = parseInt(dokStatus);

                // Validasi untuk role kadeptit
                if (userRole === "kadept") {
                    if (dokStatus === 1) {
                        DevExpress.ui.notify("Request sudah di-approve oleh kadept!", "warning", 2000);
                        return;
                    }
                    if (dokStatus === 3) {
                        DevExpress.ui.notify("Request sudah di-approve oleh kadept IT!", "warning", 2000);
                        return;
                    }
                }

                $.ajax({
                    url: "/api/ManageMasterDokumenRequest/UpdateStatus",
                    type: "PUT",
                    data: { key: dokId, dok_status: dokStatus },
                    success: function (response) {
                        DevExpress.ui.notify(response.Message, "success", 2000);
                        popup.hide();
                        $("#gridContainer").dxDataGrid("instance").refresh();
                    },
                    error: function (xhr) {
                        DevExpress.ui.notify("Terjadi kesalahan: " + xhr.responseText, "error", 3000);
                    }
                });
            }

             function showApproveUserPopup(dokId, dokStatus) {
                     let dataPopUp = document.getElementById("approveuser-popup");
                     let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                     if (dokStatus === undefined || dokStatus === null) {
                         dokStatus = -1; // Jika tidak ada status, beri nilai default -1
                     }

                     popup.option({
                         dokId: dokId,
                         dokStatus: dokStatus // Pastikan dokStatus tersimpan di popup
                     });

                     console.log("Popup dibuka dengan Dokumen ID:", dokId, "Status:", dokStatus);

                     popup.show();
                 }

            function functionBtnApproveUser() {
                    let dataPopUp = document.getElementById("approveuser-popup");
                     let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                     let dokId = popup.option("dokId");
                     let dokStatus = popup.option("dokStatus"); // Ambil dok_status dari popup
                     var userRole = "@logSession.userrole";

                     console.log("Dokumen ID:", dokId);
                     console.log("Dokumen Status sebelum validasi:", dokStatus);
                     console.log("User Role:", userRole);
                     console.log("Popup Options:", popup.option()); // Debugging

                     if (!dokId) {
                         DevExpress.ui.notify("Dokumen ID tidak valid!", "error", 2000);
                         return;
                     }

                     if (dokStatus === undefined || dokStatus === null) {
                         DevExpress.ui.notify("Gagal mendapatkan status dokumen!", "error", 2000);
                         return;
                     }

                     dokStatus = parseInt(dokStatus);


                     $.ajax({
                         url: "/api/ManageMasterDokumenRequest/ApproveBastUser",
                         type: "PUT",
                         data: { key: dokId, dok_status: dokStatus },
                         success: function (response) {
                             DevExpress.ui.notify(response.Message, "success", 2000);
                             popup.hide();
                             $("#gridContainer").dxDataGrid("instance").refresh();
                         },
                         error: function (xhr) {
                             DevExpress.ui.notify("Terjadi kesalahan: " + xhr.responseText, "error", 3000);
                         }
                     });
                     }


                      function showApproveKadeptITPopup(dokId, dokStatus) {
         let dataPopUp = document.getElementById("approvekadeptit-popup");
         let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

         if (dokStatus === undefined || dokStatus === null) {
             dokStatus = -1; // Jika tidak ada status, beri nilai default -1
         }

         popup.option({
             dokId: dokId,
             dokStatus: dokStatus // Pastikan dokStatus tersimpan di popup
         });

         console.log("Popup dibuka dengan Dokumen ID:", dokId, "Status:", dokStatus);

         popup.show();
     }

    function functionBtnApproveKadeptIT() {
            let dataPopUp = document.getElementById("approvekadeptit-popup");
             let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

             let dokId = popup.option("dokId");
             let dokStatus = popup.option("dokStatus"); // Ambil dok_status dari popup
             var userRole = "@logSession.userrole";

             console.log("Dokumen ID:", dokId);
             console.log("Dokumen Status sebelum validasi:", dokStatus);
             console.log("User Role:", userRole);
             console.log("Popup Options:", popup.option()); // Debugging

             if (!dokId) {
                 DevExpress.ui.notify("Dokumen ID tidak valid!", "error", 2000);
                 return;
             }

             if (dokStatus === undefined || dokStatus === null) {
                 DevExpress.ui.notify("Gagal mendapatkan status dokumen!", "error", 2000);
                 return;
             }

             dokStatus = parseInt(dokStatus);


             $.ajax({
                 url: "/api/ManageMasterDokumenRequest/ApproveBastKadeptIT",
                 type: "PUT",
                 data: { key: dokId, dok_status: dokStatus },
                 success: function (response) {
                     DevExpress.ui.notify(response.Message, "success", 2000);
                     popup.hide();
                     $("#gridContainer").dxDataGrid("instance").refresh();
                 },
                 error: function (xhr) {
                     DevExpress.ui.notify("Terjadi kesalahan: " + xhr.responseText, "error", 3000);
                 }
             });
             }


                function onSelectionChanged(e) {
                    const selectedRow = e.selectedRowsData[0];
                    const approveButton = $(".btn-approve");

                    if (!selectedRow || [1, 2, 3].includes(selectedRow.dok_status)) {
                        approveButton.prop("disabled", true);
                    } else {
                        approveButton.prop("disabled", false);
                    }
            }

            function approvePopupContentTemplate(contentElement) {
                contentElement.text("Apakah anda ingin menyetujui data berikut?");
            }

            $(function () {
                $("#approve-popup").dxPopup("instance").option("contentTemplate", approvePopupContentTemplate);
            });


            function approveUserPopupContentTemplate(contentElement) {
                contentElement.text("Apakah anda ingin menyetujui data berikut?");
            }

            $(function () {
                $("#approveuser-popup").dxPopup("instance").option("contentTemplate", approveUserPopupContentTemplate);
            });

            function approveKadeptItPopupContentTemplate(contentElement) {
                contentElement.text("Apakah anda ingin menyetujui data berikut?");
            }

            $(function () {
                $("#approvekadeptit-popup").dxPopup("instance").option("contentTemplate", approveKadeptItPopupContentTemplate);
            });



            function approveItContentTemplate(contentElement) {
                contentElement.text("Are you sure you want to approve IT this record?");
            }

            $(function () {
                // Set contentTemplate option secara manual di client side
                $("#approveit-popup").dxPopup("instance").option("contentTemplate", approveItContentTemplate);
            });


            function showApproveItPopup(dokId, dokStatus) {
                let popup = $("#approveit-popup").dxPopup("instance");

                popup.option({
                    dokId: dokId,
                    dokStatus: dokStatus ?? -1
                });

                popup.show();
            }



            function functionBtnApproveIt() {
                let dataPopUp = document.getElementById("approveit-popup");
                let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);

                let dokId = popup.option("dokId");
                let dokStatus = popup.option("dokStatus"); // Ambil dok_status dari popup
                var userRole = "@logSession.userrole";

                console.log("Dokumen ID:", dokId);
                console.log("Dokumen Status sebelum validasi:", dokStatus);
                console.log("User Role:", userRole);
                console.log("Popup Options:", popup.option()); // Debugging

                if (!dokId) {
                    DevExpress.ui.notify("Dokumen ID tidak valid!", "error", 2000);
                    return;
                }

                if (dokStatus === undefined || dokStatus === null) {
                    DevExpress.ui.notify("Gagal mendapatkan status dokumen!", "error", 2000);
                    return;
                }

                dokStatus = parseInt(dokStatus);

                // Validasi untuk role kadeptit
                if (userRole === "kadeptit") {
                    if (dokStatus === 0) {
                        DevExpress.ui.notify("Request belum di-approve oleh kadept!", "warning", 2000);
                        return;
                    }
                    if (dokStatus === 3) {
                        DevExpress.ui.notify("Request sudah di-approve oleh kadept IT!", "warning", 2000);
                        return;
                    }
                }

                $.ajax({
                    url: "/api/ManageMasterDokumenRequest/ApproveIt",
                    type: "PUT",
                    data: { key: dokId, dok_status: dokStatus },
                    success: function (response) {
                        DevExpress.ui.notify(response.Message, "success", 2000);
                        popup.hide();
                        $("#gridContainer").dxDataGrid("instance").refresh();
                    },
                    error: function (xhr) {
                        DevExpress.ui.notify("Terjadi kesalahan: " + xhr.responseText, "error", 3000);
                    }
                });
            }


            let isEditMode = false;
            let currentDokId = null;
            let savedLampiranBase64 = null;


            async function clickPopup() {
                isEditMode = false;
                currentDokId = null;

                // Ambil reference number baru
                try {
                    const newRef = await getLastReferenceNumber();
                    $("#reference_number").dxTextBox("instance").option("value", newRef);
                } catch (error) {
                    console.error("❌ Gagal generate nomor referensi:", error);
                }

                // Kosongkan field lain
                $("#plant").dxTextBox("instance").option("value", "");
                $("#section_department").dxTextBox("instance").option("value", "");
                $("#npk").dxTextBox("instance").option("value", "");
                $("#erp_name").dxTextBox("instance").option("value", "");
                $("#erp_id").dxTextBox("instance").option("value", "infor");
                $("#req_modul").dxRadioGroup("instance").option("value", null);
                $("#dokumen").dxTextBox("instance").option("value", "");
                $("#reason").dxTextBox("instance").option("value", "");
                $("#dok_ttd_user").val("");

                const idUserSelectBox = $("#id_user").dxSelectBox("instance");
                idUserSelectBox.reset();

                $("#grid_detail_dokumen").dxDataGrid("instance").option("dataSource", []);
                $("#dok_lampiran").dxFileUploader("instance").reset();

                if (typeof signaturePad !== "undefined") {
                    signaturePad.clear();
                }

                const popup = DevExpress.ui.dxPopup.getInstance(document.getElementById("form-scheduled"));
                popup.option("title", "Add Dokumen Akses Modul / Session ERP");
                popup.show();
            }


            async function clickPopupEdit(data) {
                console.log("🧪 Data dari grid (Edit):", data);

                isEditMode = true;
                currentDokId = data.dok_id;

                savedLampiranBase64 = data.dok_lampiran ?? null;

                // 📝 Set field utama
                $("#reference_number").dxTextBox("instance").option("value", data.dok_refnum ?? "");
                $("#plant").dxTextBox("instance").option("value", data.dok_plant ?? "");
                $("#section_department").dxTextBox("instance").option("value", data.dok_section ?? "");
                $("#npk").dxTextBox("instance").option("value", data.usr_npk ?? "");
                $("#erp_name").dxTextBox("instance").option("value", data.dok_user_erp ?? "");
                $("#erp_id").dxTextBox("instance").option("value", data.dok_erp ?? "infor");
                $("#req_modul").dxRadioGroup("instance").option("value", data.dok_req_modul ?? "");
                $("#dokumen").dxTextBox("instance").option("value", data.dok_document ?? "");
                $("#reason").dxTextBox("instance").option("value", data.dok_reason ?? "");
                $("#dok_ttd_user").val(data.dok_ttd_user ?? "");

                // 📋 Set DataGrid detail (mapping field)
                const mappedDetail = (data.DetailDokumenRequests || []).map(item => ({
                    menu_session: item.dok_menu,
                    id_menu: item.dok_id_menu,
                    access: item.dok_access,
                    note: item.dok_note || ""
                }));

                const detailGrid = $("#grid_detail_dokumen").dxDataGrid("instance");
                detailGrid.option("dataSource", mappedDetail);

                // 👤 Set SelectBox Full Name
                const idUserSelectBox = $("#id_user").dxSelectBox("instance");
                idUserSelectBox.option("value", data.id_user ?? null);

                if (data.id_user) {
                    idUserSelectBox.option("placeholder", "Memuat nama...");
                    try {
                        const res = await $.get("/api/ManageMasterUserForm/GetUserById", { id_user: data.id_user });
                        console.log("✅ Response GetUserById:", res);
                        if (res && res.usr_nama) {
                            idUserSelectBox.option("displayValue", res.usr_nama);
                        } else {
                            console.warn("⚠️ usr_nama tidak tersedia.");
                        }
                    } catch (xhr) {
                        console.error("❌ Gagal mengambil nama user:", xhr.responseText);
                    } finally {
                        idUserSelectBox.option("placeholder", "");
                    }
                } else {
                    console.warn("⚠️ ID user tidak tersedia di data.");
                }

                // 📎 Tampilkan dummy lampiran jika ada
                const lampiranUploader = $("#dok_lampiran").dxFileUploader("instance");

                if (data.dok_lampiran) {
                    const dummyFile = {
                        name: `Lampiran_${data.dok_refnum}.pdf`,
                        size: Math.round((data.dok_lampiran.length * 3) / 4),
                        type: "application/pdf",
                        lastModified: new Date().getTime()
                    };

                    lampiranUploader.option("value", [dummyFile]);

                    // Tambahan label di UI jika diperlukan
                    setTimeout(() => {
                        $(".dx-fileuploader-files-container").append(
                            `<div style="color:gray;font-size:12px;margin-top:4px;">
                    📎 Ini adalah lampiran sebelumnya
                </div>`
                        );
                    }, 300);
                } else {
                    lampiranUploader.reset();
                }

                // 🪟 Tampilkan popup Edit
                const popup = DevExpress.ui.dxPopup.getInstance(document.getElementById("form-scheduled"));
                popup.option("title", "Edit Dokumen Akses Modul / Session ERP");
                popup.show();
            }



            function deleteData(data) {
                DevExpress.ui.dialog.confirm("Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus")
                    .done(function (dialogResult) {
                        if (dialogResult) {
                            $.ajax({
                                url: "/api/ManageMasterDokumenRequest/Delete/" + data.dok_id,
                                type: "DELETE",
                                success: function (response) {
                                    DevExpress.ui.notify(response.Message, "success", 1500);
                                    refreshTableDevExpress();

                                },
                                error: function (xhr) {
                                    DevExpress.ui.notify("Gagal menghapus: " + xhr.responseText, "error", 3000);
                                }
                            });
                        }
                    });
            }


        function clickCanceled() {
            let dataPopUp = document.getElementById("form-scheduled");
            let popup = DevExpress.ui.dxPopup.getInstance(dataPopUp);
            popup.hide();
        }


        function cell_numbering(cellElement, cellInfo) {
            cellElement.text(cellInfo.rowIndex + 1);
        }

        function getFileUploaderInstance() {
            return $("#file-uploader").dxFileUploader("instance");
        }

        function onFilesUploaded(e) {
            DevExpress.ui.dialog.alert("Proses Upload Selesai", "Informasi");
            location.reload(true);
        }

        function fileUploader_valueChanged(e) {
            var files = e.value;
            if (files.length > 0) {
                $("#selected-files .selected-item").remove();

                $.each(files, function (i, file) {
                    var $selectedItem = $("<div />").addClass("selected-item");
                    $selectedItem.append(
                        $("<span />").html("Name: " + file.name + "<br/>"),
                        $("<span />").html("Size " + file.size + " bytes" + "<br/>"),
                        $("<span />").html("Type " + file.type + "<br/>"),
                        $("<span />").html("Last Modified Date: " + file.lastModifiedDate)
                    );
                    $selectedItem.appendTo($("#selected-files"));
                });
                $("#selected-files").show();
            }
            else
                $("#selected-files").hide();
        }
        let uploadButton;

                function onToolbarPreparing(e) {
                    var dataGrid = e.component;

                    // ✅ Tampilkan dropdown hanya jika role Admin
                    if (userRole === "admin" || userRole === "kadeptit") {
                        e.toolbarOptions.items.unshift({
                            location: "before",
                            widget: "dxSelectBox",
                            options: {
                                width: 200,
                                items: ["IT", "Accounting"], // List departemen
                                placeholder: "Filter by Department",
                                onValueChanged: function (e) {
                                    let selectedDepartment = e.value;

                                    // Re-load DataGrid dengan parameter filter
                                    dataGrid.option("dataSource", {
                                        store: new DevExpress.data.CustomStore({
                                            load: function (loadOptions) {
                                                let d = $.Deferred();
                                                $.getJSON("/api/ManageMasterDokumenRequest", {
                                                    departmentFilter: selectedDepartment
                                                })
                                                    .done(function (result) {
                                                        d.resolve(result.data, { totalCount: result.totalCount });
                                                    })
                                                    .fail(function () {
                                                        d.reject("Data loading error");
                                                    });
                                                return d.promise();
                                            }
                                        })
                                    });
                                }
                            }
                        });
                    }

                    // ✅ Tombol Add (hanya muncul untuk role "user")
                    e.toolbarOptions.items.push({
                        location: "after",
                        widget: "dxButton",
                        options: {
                            text: "Add",
                            icon: "add",
                            visible: userRole === "user", // hanya user biasa
                            onClick: clickPopup,
                            onInitialized: function (e) {
                                refreshButton = e.component;
                            }
                        }
                    });

                    // Tambahkan tombol Refresh
                    e.toolbarOptions.items.push({
                        location: "after",
                        widget: "dxButton",
                        options: {
                            text: "Refresh",
                            icon: "refresh",
                            onClick: onRefreshBtnClick,
                            onInitialized: function (e) {
                                refreshButton = e.component;
                            }
                        }
                    });
                }


        function onUploadBtnClick() {
            document.getElementById("btn-modal-show").click();
        }

        function onRefreshBtnClick() {
            //location.reload(true);
            refreshTableDevExpress();
        }

        function refreshTableDevExpress() {
            let dataGrid = document.getElementById("gridContainer");
            let instanceDataGrid = DevExpress.ui.dxDataGrid.getInstance(dataGrid);
            var $link = '@Html.Raw(Url.Action("ManageMasterDokumenRequest", "api"))';

             instanceDataGrid.option('dataSource', DevExpress.data.AspNet.createStore({
                 key: "dok_id",
                 loadUrl: $link,
                 insertUrl: $link,
                 updateUrl: $link,
                 deleteUrl: $link
             }));

             instanceDataGrid.refresh();
        }
        </script>

    }
